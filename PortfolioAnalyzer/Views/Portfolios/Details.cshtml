@model PortfolioAnalyzer.Models.ViewModels.PortfolioDetailsViewModel;

@{
    ViewData["Title"] = "Details";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

<h1>@Html.DisplayFor(model => model.Portfolio.Name)</h1>

<div class="d-flex">
    <div>
        <h4>Details</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Portfolio.DateCreated)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Portfolio.DateCreated)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Portfolio.Description)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Portfolio.Description)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Portfolio.Notes)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Portfolio.Notes)
            </dd>
        </dl>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Portfolio.Id">Edit</a> |
            <a asp-action="Index">Back to List</a>
        </div>
    </div>
    <div>
        <h4>Securities</h4>
        <hr />
        <table class="table">
            <thead>
                <tr>
                    <th>Ticker</th>
                    <th>Name</th>
                    <th>Weight</th>
                    <th>Asset Class</th>
                </tr>
            </thead>
            <tbody>
                @foreach (PortfolioSecurity ps in @Model.Portfolio.PortfolioSecurities)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => ps.Security.Ticker)</td>
                        <td>@Html.DisplayFor(modelItem => ps.Security.Name)</td>
                        <td>@Html.DisplayFor(modelItem => ps.Weight) %</td>
                        <td>@Html.DisplayFor(modelItem => ps.AssetClass.Name)</td>
                        <td>
                            <a asp-action="Details" asp-controller="Securities" asp-route-id="@ps.Security.Id">Details</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<div>
    @*<div class="form-group">
            <label asp-for="@Model.TimePeriodOptions" class="control-label"></label>
            <select asp-for="@Model.TimePeriod" class="form-control" asp-items="@Model.TimePeriodOptions"></select>
        </div>*@
    @Html.ActionLink("1 Year", "Details", new { timePeriod = "1y" }) |
    @Html.ActionLink("2 Years", "Details", new { timePeriod = "2y" }) |
    @Html.ActionLink("5 Years", "Details", new { timePeriod = "5y" }) |
</div>

@if (Model.TimePeriod != null)
{
    <div>
        <div>
            <h4>Analysis</h4>
            <hr />
            <table class="table">
                <thead>
                    <tr>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Period Return</th>
                        <th>CAGR</th>
                        <th>Standard Deviation</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@Html.DisplayFor(model => model.StartDate)</td>
                        <td>@Html.DisplayFor(model => model.EndDate)</td>
                        <td>@Html.DisplayFor(model => model.Return) %</td>
                        <td>@Html.DisplayFor(model => model.CAGR) %</td>
                        <td>@Html.DisplayFor(model => model.StdDeviation) %</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <canvas id="portfolioValuesChart"></canvas>
    </div>

    <script>
        // Get a reference to the viewModel that was passed in from the controller
        //var viewModel = @*@Html.Raw(Json.Serialize((Model)));*@


        var chartData = @Html.Raw(Model.ChartData);
        console.log(chartData);

        let dates = Object.keys(chartData).map(key => key.split("T")[0]);
        let values = Object.values(chartData).map(value => Math.round(value));

        console.log(dates);
        console.log(values);

        var ctx = document.getElementById("portfolioValuesChart").getContext("2d");

        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Value',
                    data: values,
                    backgroundColor: [
                        'rgba(29, 88, 215, 1)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    pointBackgroundColor: [
                        'rgba(210, 222, 249, 1)'
                    ],
                    pointBorderColor: [
                        'rgba(210, 222, 249, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Value of $100,000 Portfolio"
                },
                scales: {
                    yAxes: [{
                        display: true,
                        labelString: "Value",
                        ticks: {
                            beginAtZero: false
                        },
                        gridLines: {
                            display: false
                        }
                    }],
                    xAxes: [{
                        display: true,
                        labelString: "Date",
                        gridLines: {
                            display: false
                        }
                    }]
                }
            }
        });

    </script>
}




